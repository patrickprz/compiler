Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> p_program_p
Rule 1     p_program_p -> program
Rule 2     p_program_p -> program p_program_p
Rule 3     program -> expression
Rule 4     program -> expression_ctrl
Rule 5     program -> var_assign
Rule 6     program -> VAR var_type var_declaration SEMICOLON
Rule 7     var_declaration -> var_type_id
Rule 8     var_declaration -> var_declaration SEMICOLON var_type var_type_id
Rule 9     var_type_id -> id_class
Rule 10    var_type_id -> var_type_id COMMA id_class
Rule 11    var_type -> REAL
Rule 12    var_type -> INTVAR
Rule 13    id_class -> ID
Rule 14    id_class -> ID LEFT_BRACKET INT RIGHT_BRACKET
Rule 15    id_class -> ID LEFT_BRACKET ID RIGHT_BRACKET
Rule 16    var_assign -> id_class EQUALS expression SEMICOLON
Rule 17    expression -> id_class
Rule 18    expression -> expression MULTIPLY expression
Rule 19    expression -> expression DIVIDE expression
Rule 20    expression -> expression PLUS expression
Rule 21    expression -> expression MINUS expression
Rule 22    expression -> expression POWER expression
Rule 23    expression -> INT
Rule 24    expression -> FLOAT
Rule 25    expression -> LEFT_PAR expression RIGHT_PAR
Rule 26    expression_co -> var_assign
Rule 27    expression_co -> expression_ctrl
Rule 28    expression_c -> expression_co
Rule 29    expression_c -> expression_co expression_c
Rule 30    expression_bra -> LEFT_BRACES expression_c RIGHT_BRACES
Rule 31    expression_rl -> expression RL_OP expression
Rule 32    expression_ctrl -> WHILE LEFT_PAR expression_rl RIGHT_PAR expression_bra
Rule 33    expression_ctrl -> IF LEFT_PAR expression_rl RIGHT_PAR expression_bra
Rule 34    expression_ctrl -> IF LEFT_PAR expression_rl RIGHT_PAR expression_bra ELSE expression_bra

Terminals, with rules where they appear

COMMA                : 10
DIVIDE               : 19
ELSE                 : 34
EQUALS               : 16
FLOAT                : 24
ID                   : 13 14 15 15
IF                   : 33 34
INT                  : 14 23
INTVAR               : 12
LEFT_BRACES          : 30
LEFT_BRACKET         : 14 15
LEFT_PAR             : 25 32 33 34
MINUS                : 21
MULTIPLY             : 18
PLUS                 : 20
POWER                : 22
REAL                 : 11
RIGHT_BRACES         : 30
RIGHT_BRACKET        : 14 15
RIGHT_PAR            : 25 32 33 34
RL_OP                : 31
SEMICOLON            : 6 8 16
VAR                  : 6
WHILE                : 32
error                : 

Nonterminals, with rules where they appear

expression           : 3 16 18 18 19 19 20 20 21 21 22 22 25 31 31
expression_bra       : 32 33 34 34
expression_c         : 29 30
expression_co        : 28 29
expression_ctrl      : 4 27
expression_rl        : 32 33 34
id_class             : 9 10 16 17
p_program_p          : 2 0
program              : 1 2
var_assign           : 5 26
var_declaration      : 6 8
var_type             : 6 8
var_type_id          : 7 8 10

Parsing method: LALR

state 0

    (0) S' -> . p_program_p
    (1) p_program_p -> . program
    (2) p_program_p -> . program p_program_p
    (3) program -> . expression
    (4) program -> . expression_ctrl
    (5) program -> . var_assign
    (6) program -> . VAR var_type var_declaration SEMICOLON
    (17) expression -> . id_class
    (18) expression -> . expression MULTIPLY expression
    (19) expression -> . expression DIVIDE expression
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression POWER expression
    (23) expression -> . INT
    (24) expression -> . FLOAT
    (25) expression -> . LEFT_PAR expression RIGHT_PAR
    (32) expression_ctrl -> . WHILE LEFT_PAR expression_rl RIGHT_PAR expression_bra
    (33) expression_ctrl -> . IF LEFT_PAR expression_rl RIGHT_PAR expression_bra
    (34) expression_ctrl -> . IF LEFT_PAR expression_rl RIGHT_PAR expression_bra ELSE expression_bra
    (16) var_assign -> . id_class EQUALS expression SEMICOLON
    (13) id_class -> . ID
    (14) id_class -> . ID LEFT_BRACKET INT RIGHT_BRACKET
    (15) id_class -> . ID LEFT_BRACKET ID RIGHT_BRACKET

    VAR             shift and go to state 1
    INT             shift and go to state 4
    FLOAT           shift and go to state 10
    LEFT_PAR        shift and go to state 5
    WHILE           shift and go to state 6
    IF              shift and go to state 7
    ID              shift and go to state 9

    expression_ctrl                shift and go to state 13
    program                        shift and go to state 12
    id_class                       shift and go to state 8
    var_assign                     shift and go to state 2
    p_program_p                    shift and go to state 11
    expression                     shift and go to state 3

state 1

    (6) program -> VAR . var_type var_declaration SEMICOLON
    (11) var_type -> . REAL
    (12) var_type -> . INTVAR

    REAL            shift and go to state 16
    INTVAR          shift and go to state 15

    var_type                       shift and go to state 14

state 2

    (5) program -> var_assign .

    VAR             reduce using rule 5 (program -> var_assign .)
    INT             reduce using rule 5 (program -> var_assign .)
    FLOAT           reduce using rule 5 (program -> var_assign .)
    LEFT_PAR        reduce using rule 5 (program -> var_assign .)
    WHILE           reduce using rule 5 (program -> var_assign .)
    IF              reduce using rule 5 (program -> var_assign .)
    ID              reduce using rule 5 (program -> var_assign .)
    $end            reduce using rule 5 (program -> var_assign .)


state 3

    (3) program -> expression .
    (18) expression -> expression . MULTIPLY expression
    (19) expression -> expression . DIVIDE expression
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . POWER expression

    VAR             reduce using rule 3 (program -> expression .)
    INT             reduce using rule 3 (program -> expression .)
    FLOAT           reduce using rule 3 (program -> expression .)
    LEFT_PAR        reduce using rule 3 (program -> expression .)
    WHILE           reduce using rule 3 (program -> expression .)
    IF              reduce using rule 3 (program -> expression .)
    ID              reduce using rule 3 (program -> expression .)
    $end            reduce using rule 3 (program -> expression .)
    MULTIPLY        shift and go to state 17
    DIVIDE          shift and go to state 20
    PLUS            shift and go to state 21
    MINUS           shift and go to state 18
    POWER           shift and go to state 19


state 4

    (23) expression -> INT .

    MULTIPLY        reduce using rule 23 (expression -> INT .)
    DIVIDE          reduce using rule 23 (expression -> INT .)
    PLUS            reduce using rule 23 (expression -> INT .)
    MINUS           reduce using rule 23 (expression -> INT .)
    POWER           reduce using rule 23 (expression -> INT .)
    VAR             reduce using rule 23 (expression -> INT .)
    INT             reduce using rule 23 (expression -> INT .)
    FLOAT           reduce using rule 23 (expression -> INT .)
    LEFT_PAR        reduce using rule 23 (expression -> INT .)
    WHILE           reduce using rule 23 (expression -> INT .)
    IF              reduce using rule 23 (expression -> INT .)
    ID              reduce using rule 23 (expression -> INT .)
    $end            reduce using rule 23 (expression -> INT .)
    RIGHT_PAR       reduce using rule 23 (expression -> INT .)
    RL_OP           reduce using rule 23 (expression -> INT .)
    SEMICOLON       reduce using rule 23 (expression -> INT .)


state 5

    (25) expression -> LEFT_PAR . expression RIGHT_PAR
    (17) expression -> . id_class
    (18) expression -> . expression MULTIPLY expression
    (19) expression -> . expression DIVIDE expression
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression POWER expression
    (23) expression -> . INT
    (24) expression -> . FLOAT
    (25) expression -> . LEFT_PAR expression RIGHT_PAR
    (13) id_class -> . ID
    (14) id_class -> . ID LEFT_BRACKET INT RIGHT_BRACKET
    (15) id_class -> . ID LEFT_BRACKET ID RIGHT_BRACKET

    INT             shift and go to state 4
    FLOAT           shift and go to state 10
    LEFT_PAR        shift and go to state 5
    ID              shift and go to state 9

    id_class                       shift and go to state 22
    expression                     shift and go to state 23

state 6

    (32) expression_ctrl -> WHILE . LEFT_PAR expression_rl RIGHT_PAR expression_bra

    LEFT_PAR        shift and go to state 24


state 7

    (33) expression_ctrl -> IF . LEFT_PAR expression_rl RIGHT_PAR expression_bra
    (34) expression_ctrl -> IF . LEFT_PAR expression_rl RIGHT_PAR expression_bra ELSE expression_bra

    LEFT_PAR        shift and go to state 25


state 8

    (17) expression -> id_class .
    (16) var_assign -> id_class . EQUALS expression SEMICOLON

    MULTIPLY        reduce using rule 17 (expression -> id_class .)
    DIVIDE          reduce using rule 17 (expression -> id_class .)
    PLUS            reduce using rule 17 (expression -> id_class .)
    MINUS           reduce using rule 17 (expression -> id_class .)
    POWER           reduce using rule 17 (expression -> id_class .)
    VAR             reduce using rule 17 (expression -> id_class .)
    INT             reduce using rule 17 (expression -> id_class .)
    FLOAT           reduce using rule 17 (expression -> id_class .)
    LEFT_PAR        reduce using rule 17 (expression -> id_class .)
    WHILE           reduce using rule 17 (expression -> id_class .)
    IF              reduce using rule 17 (expression -> id_class .)
    ID              reduce using rule 17 (expression -> id_class .)
    $end            reduce using rule 17 (expression -> id_class .)
    EQUALS          shift and go to state 26


state 9

    (13) id_class -> ID .
    (14) id_class -> ID . LEFT_BRACKET INT RIGHT_BRACKET
    (15) id_class -> ID . LEFT_BRACKET ID RIGHT_BRACKET

    EQUALS          reduce using rule 13 (id_class -> ID .)
    MULTIPLY        reduce using rule 13 (id_class -> ID .)
    DIVIDE          reduce using rule 13 (id_class -> ID .)
    PLUS            reduce using rule 13 (id_class -> ID .)
    MINUS           reduce using rule 13 (id_class -> ID .)
    POWER           reduce using rule 13 (id_class -> ID .)
    VAR             reduce using rule 13 (id_class -> ID .)
    INT             reduce using rule 13 (id_class -> ID .)
    FLOAT           reduce using rule 13 (id_class -> ID .)
    LEFT_PAR        reduce using rule 13 (id_class -> ID .)
    WHILE           reduce using rule 13 (id_class -> ID .)
    IF              reduce using rule 13 (id_class -> ID .)
    ID              reduce using rule 13 (id_class -> ID .)
    $end            reduce using rule 13 (id_class -> ID .)
    RIGHT_PAR       reduce using rule 13 (id_class -> ID .)
    RL_OP           reduce using rule 13 (id_class -> ID .)
    SEMICOLON       reduce using rule 13 (id_class -> ID .)
    COMMA           reduce using rule 13 (id_class -> ID .)
    LEFT_BRACKET    shift and go to state 27


state 10

    (24) expression -> FLOAT .

    MULTIPLY        reduce using rule 24 (expression -> FLOAT .)
    DIVIDE          reduce using rule 24 (expression -> FLOAT .)
    PLUS            reduce using rule 24 (expression -> FLOAT .)
    MINUS           reduce using rule 24 (expression -> FLOAT .)
    POWER           reduce using rule 24 (expression -> FLOAT .)
    VAR             reduce using rule 24 (expression -> FLOAT .)
    INT             reduce using rule 24 (expression -> FLOAT .)
    FLOAT           reduce using rule 24 (expression -> FLOAT .)
    LEFT_PAR        reduce using rule 24 (expression -> FLOAT .)
    WHILE           reduce using rule 24 (expression -> FLOAT .)
    IF              reduce using rule 24 (expression -> FLOAT .)
    ID              reduce using rule 24 (expression -> FLOAT .)
    $end            reduce using rule 24 (expression -> FLOAT .)
    RIGHT_PAR       reduce using rule 24 (expression -> FLOAT .)
    RL_OP           reduce using rule 24 (expression -> FLOAT .)
    SEMICOLON       reduce using rule 24 (expression -> FLOAT .)


state 11

    (0) S' -> p_program_p .



state 12

    (1) p_program_p -> program .
    (2) p_program_p -> program . p_program_p
    (1) p_program_p -> . program
    (2) p_program_p -> . program p_program_p
    (3) program -> . expression
    (4) program -> . expression_ctrl
    (5) program -> . var_assign
    (6) program -> . VAR var_type var_declaration SEMICOLON
    (17) expression -> . id_class
    (18) expression -> . expression MULTIPLY expression
    (19) expression -> . expression DIVIDE expression
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression POWER expression
    (23) expression -> . INT
    (24) expression -> . FLOAT
    (25) expression -> . LEFT_PAR expression RIGHT_PAR
    (32) expression_ctrl -> . WHILE LEFT_PAR expression_rl RIGHT_PAR expression_bra
    (33) expression_ctrl -> . IF LEFT_PAR expression_rl RIGHT_PAR expression_bra
    (34) expression_ctrl -> . IF LEFT_PAR expression_rl RIGHT_PAR expression_bra ELSE expression_bra
    (16) var_assign -> . id_class EQUALS expression SEMICOLON
    (13) id_class -> . ID
    (14) id_class -> . ID LEFT_BRACKET INT RIGHT_BRACKET
    (15) id_class -> . ID LEFT_BRACKET ID RIGHT_BRACKET

    $end            reduce using rule 1 (p_program_p -> program .)
    VAR             shift and go to state 1
    INT             shift and go to state 4
    FLOAT           shift and go to state 10
    LEFT_PAR        shift and go to state 5
    WHILE           shift and go to state 6
    IF              shift and go to state 7
    ID              shift and go to state 9

    expression_ctrl                shift and go to state 13
    program                        shift and go to state 12
    id_class                       shift and go to state 8
    var_assign                     shift and go to state 2
    p_program_p                    shift and go to state 28
    expression                     shift and go to state 3

state 13

    (4) program -> expression_ctrl .

    VAR             reduce using rule 4 (program -> expression_ctrl .)
    INT             reduce using rule 4 (program -> expression_ctrl .)
    FLOAT           reduce using rule 4 (program -> expression_ctrl .)
    LEFT_PAR        reduce using rule 4 (program -> expression_ctrl .)
    WHILE           reduce using rule 4 (program -> expression_ctrl .)
    IF              reduce using rule 4 (program -> expression_ctrl .)
    ID              reduce using rule 4 (program -> expression_ctrl .)
    $end            reduce using rule 4 (program -> expression_ctrl .)


state 14

    (6) program -> VAR var_type . var_declaration SEMICOLON
    (7) var_declaration -> . var_type_id
    (8) var_declaration -> . var_declaration SEMICOLON var_type var_type_id
    (9) var_type_id -> . id_class
    (10) var_type_id -> . var_type_id COMMA id_class
    (13) id_class -> . ID
    (14) id_class -> . ID LEFT_BRACKET INT RIGHT_BRACKET
    (15) id_class -> . ID LEFT_BRACKET ID RIGHT_BRACKET

    ID              shift and go to state 9

    var_type_id                    shift and go to state 29
    id_class                       shift and go to state 30
    var_declaration                shift and go to state 31

state 15

    (12) var_type -> INTVAR .

    ID              reduce using rule 12 (var_type -> INTVAR .)


state 16

    (11) var_type -> REAL .

    ID              reduce using rule 11 (var_type -> REAL .)


state 17

    (18) expression -> expression MULTIPLY . expression
    (17) expression -> . id_class
    (18) expression -> . expression MULTIPLY expression
    (19) expression -> . expression DIVIDE expression
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression POWER expression
    (23) expression -> . INT
    (24) expression -> . FLOAT
    (25) expression -> . LEFT_PAR expression RIGHT_PAR
    (13) id_class -> . ID
    (14) id_class -> . ID LEFT_BRACKET INT RIGHT_BRACKET
    (15) id_class -> . ID LEFT_BRACKET ID RIGHT_BRACKET

    INT             shift and go to state 4
    FLOAT           shift and go to state 10
    LEFT_PAR        shift and go to state 5
    ID              shift and go to state 9

    id_class                       shift and go to state 22
    expression                     shift and go to state 32

state 18

    (21) expression -> expression MINUS . expression
    (17) expression -> . id_class
    (18) expression -> . expression MULTIPLY expression
    (19) expression -> . expression DIVIDE expression
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression POWER expression
    (23) expression -> . INT
    (24) expression -> . FLOAT
    (25) expression -> . LEFT_PAR expression RIGHT_PAR
    (13) id_class -> . ID
    (14) id_class -> . ID LEFT_BRACKET INT RIGHT_BRACKET
    (15) id_class -> . ID LEFT_BRACKET ID RIGHT_BRACKET

    INT             shift and go to state 4
    FLOAT           shift and go to state 10
    LEFT_PAR        shift and go to state 5
    ID              shift and go to state 9

    id_class                       shift and go to state 22
    expression                     shift and go to state 33

state 19

    (22) expression -> expression POWER . expression
    (17) expression -> . id_class
    (18) expression -> . expression MULTIPLY expression
    (19) expression -> . expression DIVIDE expression
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression POWER expression
    (23) expression -> . INT
    (24) expression -> . FLOAT
    (25) expression -> . LEFT_PAR expression RIGHT_PAR
    (13) id_class -> . ID
    (14) id_class -> . ID LEFT_BRACKET INT RIGHT_BRACKET
    (15) id_class -> . ID LEFT_BRACKET ID RIGHT_BRACKET

    INT             shift and go to state 4
    FLOAT           shift and go to state 10
    LEFT_PAR        shift and go to state 5
    ID              shift and go to state 9

    id_class                       shift and go to state 22
    expression                     shift and go to state 34

state 20

    (19) expression -> expression DIVIDE . expression
    (17) expression -> . id_class
    (18) expression -> . expression MULTIPLY expression
    (19) expression -> . expression DIVIDE expression
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression POWER expression
    (23) expression -> . INT
    (24) expression -> . FLOAT
    (25) expression -> . LEFT_PAR expression RIGHT_PAR
    (13) id_class -> . ID
    (14) id_class -> . ID LEFT_BRACKET INT RIGHT_BRACKET
    (15) id_class -> . ID LEFT_BRACKET ID RIGHT_BRACKET

    INT             shift and go to state 4
    FLOAT           shift and go to state 10
    LEFT_PAR        shift and go to state 5
    ID              shift and go to state 9

    id_class                       shift and go to state 22
    expression                     shift and go to state 35

state 21

    (20) expression -> expression PLUS . expression
    (17) expression -> . id_class
    (18) expression -> . expression MULTIPLY expression
    (19) expression -> . expression DIVIDE expression
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression POWER expression
    (23) expression -> . INT
    (24) expression -> . FLOAT
    (25) expression -> . LEFT_PAR expression RIGHT_PAR
    (13) id_class -> . ID
    (14) id_class -> . ID LEFT_BRACKET INT RIGHT_BRACKET
    (15) id_class -> . ID LEFT_BRACKET ID RIGHT_BRACKET

    INT             shift and go to state 4
    FLOAT           shift and go to state 10
    LEFT_PAR        shift and go to state 5
    ID              shift and go to state 9

    id_class                       shift and go to state 22
    expression                     shift and go to state 36

state 22

    (17) expression -> id_class .

    MULTIPLY        reduce using rule 17 (expression -> id_class .)
    DIVIDE          reduce using rule 17 (expression -> id_class .)
    PLUS            reduce using rule 17 (expression -> id_class .)
    MINUS           reduce using rule 17 (expression -> id_class .)
    POWER           reduce using rule 17 (expression -> id_class .)
    VAR             reduce using rule 17 (expression -> id_class .)
    INT             reduce using rule 17 (expression -> id_class .)
    FLOAT           reduce using rule 17 (expression -> id_class .)
    LEFT_PAR        reduce using rule 17 (expression -> id_class .)
    WHILE           reduce using rule 17 (expression -> id_class .)
    IF              reduce using rule 17 (expression -> id_class .)
    ID              reduce using rule 17 (expression -> id_class .)
    $end            reduce using rule 17 (expression -> id_class .)
    RIGHT_PAR       reduce using rule 17 (expression -> id_class .)
    RL_OP           reduce using rule 17 (expression -> id_class .)
    SEMICOLON       reduce using rule 17 (expression -> id_class .)


state 23

    (25) expression -> LEFT_PAR expression . RIGHT_PAR
    (18) expression -> expression . MULTIPLY expression
    (19) expression -> expression . DIVIDE expression
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . POWER expression

    RIGHT_PAR       shift and go to state 37
    MULTIPLY        shift and go to state 17
    DIVIDE          shift and go to state 20
    PLUS            shift and go to state 21
    MINUS           shift and go to state 18
    POWER           shift and go to state 19


state 24

    (32) expression_ctrl -> WHILE LEFT_PAR . expression_rl RIGHT_PAR expression_bra
    (31) expression_rl -> . expression RL_OP expression
    (17) expression -> . id_class
    (18) expression -> . expression MULTIPLY expression
    (19) expression -> . expression DIVIDE expression
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression POWER expression
    (23) expression -> . INT
    (24) expression -> . FLOAT
    (25) expression -> . LEFT_PAR expression RIGHT_PAR
    (13) id_class -> . ID
    (14) id_class -> . ID LEFT_BRACKET INT RIGHT_BRACKET
    (15) id_class -> . ID LEFT_BRACKET ID RIGHT_BRACKET

    INT             shift and go to state 4
    FLOAT           shift and go to state 10
    LEFT_PAR        shift and go to state 5
    ID              shift and go to state 9

    expression_rl                  shift and go to state 38
    id_class                       shift and go to state 22
    expression                     shift and go to state 39

state 25

    (33) expression_ctrl -> IF LEFT_PAR . expression_rl RIGHT_PAR expression_bra
    (34) expression_ctrl -> IF LEFT_PAR . expression_rl RIGHT_PAR expression_bra ELSE expression_bra
    (31) expression_rl -> . expression RL_OP expression
    (17) expression -> . id_class
    (18) expression -> . expression MULTIPLY expression
    (19) expression -> . expression DIVIDE expression
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression POWER expression
    (23) expression -> . INT
    (24) expression -> . FLOAT
    (25) expression -> . LEFT_PAR expression RIGHT_PAR
    (13) id_class -> . ID
    (14) id_class -> . ID LEFT_BRACKET INT RIGHT_BRACKET
    (15) id_class -> . ID LEFT_BRACKET ID RIGHT_BRACKET

    INT             shift and go to state 4
    FLOAT           shift and go to state 10
    LEFT_PAR        shift and go to state 5
    ID              shift and go to state 9

    expression_rl                  shift and go to state 40
    id_class                       shift and go to state 22
    expression                     shift and go to state 39

state 26

    (16) var_assign -> id_class EQUALS . expression SEMICOLON
    (17) expression -> . id_class
    (18) expression -> . expression MULTIPLY expression
    (19) expression -> . expression DIVIDE expression
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression POWER expression
    (23) expression -> . INT
    (24) expression -> . FLOAT
    (25) expression -> . LEFT_PAR expression RIGHT_PAR
    (13) id_class -> . ID
    (14) id_class -> . ID LEFT_BRACKET INT RIGHT_BRACKET
    (15) id_class -> . ID LEFT_BRACKET ID RIGHT_BRACKET

    INT             shift and go to state 4
    FLOAT           shift and go to state 10
    LEFT_PAR        shift and go to state 5
    ID              shift and go to state 9

    id_class                       shift and go to state 22
    expression                     shift and go to state 41

state 27

    (14) id_class -> ID LEFT_BRACKET . INT RIGHT_BRACKET
    (15) id_class -> ID LEFT_BRACKET . ID RIGHT_BRACKET

    INT             shift and go to state 42
    ID              shift and go to state 43


state 28

    (2) p_program_p -> program p_program_p .

    $end            reduce using rule 2 (p_program_p -> program p_program_p .)


state 29

    (7) var_declaration -> var_type_id .
    (10) var_type_id -> var_type_id . COMMA id_class

    SEMICOLON       reduce using rule 7 (var_declaration -> var_type_id .)
    COMMA           shift and go to state 44


state 30

    (9) var_type_id -> id_class .

    COMMA           reduce using rule 9 (var_type_id -> id_class .)
    SEMICOLON       reduce using rule 9 (var_type_id -> id_class .)


state 31

    (6) program -> VAR var_type var_declaration . SEMICOLON
    (8) var_declaration -> var_declaration . SEMICOLON var_type var_type_id

    SEMICOLON       shift and go to state 45


state 32

    (18) expression -> expression MULTIPLY expression .
    (18) expression -> expression . MULTIPLY expression
    (19) expression -> expression . DIVIDE expression
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . POWER expression

    MULTIPLY        reduce using rule 18 (expression -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 18 (expression -> expression MULTIPLY expression .)
    PLUS            reduce using rule 18 (expression -> expression MULTIPLY expression .)
    MINUS           reduce using rule 18 (expression -> expression MULTIPLY expression .)
    VAR             reduce using rule 18 (expression -> expression MULTIPLY expression .)
    INT             reduce using rule 18 (expression -> expression MULTIPLY expression .)
    FLOAT           reduce using rule 18 (expression -> expression MULTIPLY expression .)
    LEFT_PAR        reduce using rule 18 (expression -> expression MULTIPLY expression .)
    WHILE           reduce using rule 18 (expression -> expression MULTIPLY expression .)
    IF              reduce using rule 18 (expression -> expression MULTIPLY expression .)
    ID              reduce using rule 18 (expression -> expression MULTIPLY expression .)
    $end            reduce using rule 18 (expression -> expression MULTIPLY expression .)
    RIGHT_PAR       reduce using rule 18 (expression -> expression MULTIPLY expression .)
    RL_OP           reduce using rule 18 (expression -> expression MULTIPLY expression .)
    SEMICOLON       reduce using rule 18 (expression -> expression MULTIPLY expression .)
    POWER           shift and go to state 19

  ! POWER           [ reduce using rule 18 (expression -> expression MULTIPLY expression .) ]
  ! MULTIPLY        [ shift and go to state 17 ]
  ! DIVIDE          [ shift and go to state 20 ]
  ! PLUS            [ shift and go to state 21 ]
  ! MINUS           [ shift and go to state 18 ]


state 33

    (21) expression -> expression MINUS expression .
    (18) expression -> expression . MULTIPLY expression
    (19) expression -> expression . DIVIDE expression
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . POWER expression

    PLUS            reduce using rule 21 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 21 (expression -> expression MINUS expression .)
    VAR             reduce using rule 21 (expression -> expression MINUS expression .)
    INT             reduce using rule 21 (expression -> expression MINUS expression .)
    FLOAT           reduce using rule 21 (expression -> expression MINUS expression .)
    LEFT_PAR        reduce using rule 21 (expression -> expression MINUS expression .)
    WHILE           reduce using rule 21 (expression -> expression MINUS expression .)
    IF              reduce using rule 21 (expression -> expression MINUS expression .)
    ID              reduce using rule 21 (expression -> expression MINUS expression .)
    $end            reduce using rule 21 (expression -> expression MINUS expression .)
    RIGHT_PAR       reduce using rule 21 (expression -> expression MINUS expression .)
    RL_OP           reduce using rule 21 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 21 (expression -> expression MINUS expression .)
    MULTIPLY        shift and go to state 17
    DIVIDE          shift and go to state 20
    POWER           shift and go to state 19

  ! MULTIPLY        [ reduce using rule 21 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 21 (expression -> expression MINUS expression .) ]
  ! POWER           [ reduce using rule 21 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 21 ]
  ! MINUS           [ shift and go to state 18 ]


state 34

    (22) expression -> expression POWER expression .
    (18) expression -> expression . MULTIPLY expression
    (19) expression -> expression . DIVIDE expression
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . POWER expression

    MULTIPLY        reduce using rule 22 (expression -> expression POWER expression .)
    DIVIDE          reduce using rule 22 (expression -> expression POWER expression .)
    PLUS            reduce using rule 22 (expression -> expression POWER expression .)
    MINUS           reduce using rule 22 (expression -> expression POWER expression .)
    POWER           reduce using rule 22 (expression -> expression POWER expression .)
    VAR             reduce using rule 22 (expression -> expression POWER expression .)
    INT             reduce using rule 22 (expression -> expression POWER expression .)
    FLOAT           reduce using rule 22 (expression -> expression POWER expression .)
    LEFT_PAR        reduce using rule 22 (expression -> expression POWER expression .)
    WHILE           reduce using rule 22 (expression -> expression POWER expression .)
    IF              reduce using rule 22 (expression -> expression POWER expression .)
    ID              reduce using rule 22 (expression -> expression POWER expression .)
    $end            reduce using rule 22 (expression -> expression POWER expression .)
    RIGHT_PAR       reduce using rule 22 (expression -> expression POWER expression .)
    RL_OP           reduce using rule 22 (expression -> expression POWER expression .)
    SEMICOLON       reduce using rule 22 (expression -> expression POWER expression .)

  ! MULTIPLY        [ shift and go to state 17 ]
  ! DIVIDE          [ shift and go to state 20 ]
  ! PLUS            [ shift and go to state 21 ]
  ! MINUS           [ shift and go to state 18 ]
  ! POWER           [ shift and go to state 19 ]


state 35

    (19) expression -> expression DIVIDE expression .
    (18) expression -> expression . MULTIPLY expression
    (19) expression -> expression . DIVIDE expression
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . POWER expression

    MULTIPLY        reduce using rule 19 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 19 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 19 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 19 (expression -> expression DIVIDE expression .)
    VAR             reduce using rule 19 (expression -> expression DIVIDE expression .)
    INT             reduce using rule 19 (expression -> expression DIVIDE expression .)
    FLOAT           reduce using rule 19 (expression -> expression DIVIDE expression .)
    LEFT_PAR        reduce using rule 19 (expression -> expression DIVIDE expression .)
    WHILE           reduce using rule 19 (expression -> expression DIVIDE expression .)
    IF              reduce using rule 19 (expression -> expression DIVIDE expression .)
    ID              reduce using rule 19 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 19 (expression -> expression DIVIDE expression .)
    RIGHT_PAR       reduce using rule 19 (expression -> expression DIVIDE expression .)
    RL_OP           reduce using rule 19 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 19 (expression -> expression DIVIDE expression .)
    POWER           shift and go to state 19

  ! POWER           [ reduce using rule 19 (expression -> expression DIVIDE expression .) ]
  ! MULTIPLY        [ shift and go to state 17 ]
  ! DIVIDE          [ shift and go to state 20 ]
  ! PLUS            [ shift and go to state 21 ]
  ! MINUS           [ shift and go to state 18 ]


state 36

    (20) expression -> expression PLUS expression .
    (18) expression -> expression . MULTIPLY expression
    (19) expression -> expression . DIVIDE expression
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . POWER expression

    PLUS            reduce using rule 20 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 20 (expression -> expression PLUS expression .)
    VAR             reduce using rule 20 (expression -> expression PLUS expression .)
    INT             reduce using rule 20 (expression -> expression PLUS expression .)
    FLOAT           reduce using rule 20 (expression -> expression PLUS expression .)
    LEFT_PAR        reduce using rule 20 (expression -> expression PLUS expression .)
    WHILE           reduce using rule 20 (expression -> expression PLUS expression .)
    IF              reduce using rule 20 (expression -> expression PLUS expression .)
    ID              reduce using rule 20 (expression -> expression PLUS expression .)
    $end            reduce using rule 20 (expression -> expression PLUS expression .)
    RIGHT_PAR       reduce using rule 20 (expression -> expression PLUS expression .)
    RL_OP           reduce using rule 20 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 20 (expression -> expression PLUS expression .)
    MULTIPLY        shift and go to state 17
    DIVIDE          shift and go to state 20
    POWER           shift and go to state 19

  ! MULTIPLY        [ reduce using rule 20 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 20 (expression -> expression PLUS expression .) ]
  ! POWER           [ reduce using rule 20 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 21 ]
  ! MINUS           [ shift and go to state 18 ]


state 37

    (25) expression -> LEFT_PAR expression RIGHT_PAR .

    MULTIPLY        reduce using rule 25 (expression -> LEFT_PAR expression RIGHT_PAR .)
    DIVIDE          reduce using rule 25 (expression -> LEFT_PAR expression RIGHT_PAR .)
    PLUS            reduce using rule 25 (expression -> LEFT_PAR expression RIGHT_PAR .)
    MINUS           reduce using rule 25 (expression -> LEFT_PAR expression RIGHT_PAR .)
    POWER           reduce using rule 25 (expression -> LEFT_PAR expression RIGHT_PAR .)
    VAR             reduce using rule 25 (expression -> LEFT_PAR expression RIGHT_PAR .)
    INT             reduce using rule 25 (expression -> LEFT_PAR expression RIGHT_PAR .)
    FLOAT           reduce using rule 25 (expression -> LEFT_PAR expression RIGHT_PAR .)
    LEFT_PAR        reduce using rule 25 (expression -> LEFT_PAR expression RIGHT_PAR .)
    WHILE           reduce using rule 25 (expression -> LEFT_PAR expression RIGHT_PAR .)
    IF              reduce using rule 25 (expression -> LEFT_PAR expression RIGHT_PAR .)
    ID              reduce using rule 25 (expression -> LEFT_PAR expression RIGHT_PAR .)
    $end            reduce using rule 25 (expression -> LEFT_PAR expression RIGHT_PAR .)
    RIGHT_PAR       reduce using rule 25 (expression -> LEFT_PAR expression RIGHT_PAR .)
    RL_OP           reduce using rule 25 (expression -> LEFT_PAR expression RIGHT_PAR .)
    SEMICOLON       reduce using rule 25 (expression -> LEFT_PAR expression RIGHT_PAR .)


state 38

    (32) expression_ctrl -> WHILE LEFT_PAR expression_rl . RIGHT_PAR expression_bra

    RIGHT_PAR       shift and go to state 46


state 39

    (31) expression_rl -> expression . RL_OP expression
    (18) expression -> expression . MULTIPLY expression
    (19) expression -> expression . DIVIDE expression
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . POWER expression

    RL_OP           shift and go to state 47
    MULTIPLY        shift and go to state 17
    DIVIDE          shift and go to state 20
    PLUS            shift and go to state 21
    MINUS           shift and go to state 18
    POWER           shift and go to state 19


state 40

    (33) expression_ctrl -> IF LEFT_PAR expression_rl . RIGHT_PAR expression_bra
    (34) expression_ctrl -> IF LEFT_PAR expression_rl . RIGHT_PAR expression_bra ELSE expression_bra

    RIGHT_PAR       shift and go to state 48


state 41

    (16) var_assign -> id_class EQUALS expression . SEMICOLON
    (18) expression -> expression . MULTIPLY expression
    (19) expression -> expression . DIVIDE expression
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . POWER expression

    SEMICOLON       shift and go to state 49
    MULTIPLY        shift and go to state 17
    DIVIDE          shift and go to state 20
    PLUS            shift and go to state 21
    MINUS           shift and go to state 18
    POWER           shift and go to state 19


state 42

    (14) id_class -> ID LEFT_BRACKET INT . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 50


state 43

    (15) id_class -> ID LEFT_BRACKET ID . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 51


state 44

    (10) var_type_id -> var_type_id COMMA . id_class
    (13) id_class -> . ID
    (14) id_class -> . ID LEFT_BRACKET INT RIGHT_BRACKET
    (15) id_class -> . ID LEFT_BRACKET ID RIGHT_BRACKET

    ID              shift and go to state 9

    id_class                       shift and go to state 52

state 45

    (6) program -> VAR var_type var_declaration SEMICOLON .
    (8) var_declaration -> var_declaration SEMICOLON . var_type var_type_id
    (11) var_type -> . REAL
    (12) var_type -> . INTVAR

    VAR             reduce using rule 6 (program -> VAR var_type var_declaration SEMICOLON .)
    INT             reduce using rule 6 (program -> VAR var_type var_declaration SEMICOLON .)
    FLOAT           reduce using rule 6 (program -> VAR var_type var_declaration SEMICOLON .)
    LEFT_PAR        reduce using rule 6 (program -> VAR var_type var_declaration SEMICOLON .)
    WHILE           reduce using rule 6 (program -> VAR var_type var_declaration SEMICOLON .)
    IF              reduce using rule 6 (program -> VAR var_type var_declaration SEMICOLON .)
    ID              reduce using rule 6 (program -> VAR var_type var_declaration SEMICOLON .)
    $end            reduce using rule 6 (program -> VAR var_type var_declaration SEMICOLON .)
    REAL            shift and go to state 16
    INTVAR          shift and go to state 15

    var_type                       shift and go to state 53

state 46

    (32) expression_ctrl -> WHILE LEFT_PAR expression_rl RIGHT_PAR . expression_bra
    (30) expression_bra -> . LEFT_BRACES expression_c RIGHT_BRACES

    LEFT_BRACES     shift and go to state 54

    expression_bra                 shift and go to state 55

state 47

    (31) expression_rl -> expression RL_OP . expression
    (17) expression -> . id_class
    (18) expression -> . expression MULTIPLY expression
    (19) expression -> . expression DIVIDE expression
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression POWER expression
    (23) expression -> . INT
    (24) expression -> . FLOAT
    (25) expression -> . LEFT_PAR expression RIGHT_PAR
    (13) id_class -> . ID
    (14) id_class -> . ID LEFT_BRACKET INT RIGHT_BRACKET
    (15) id_class -> . ID LEFT_BRACKET ID RIGHT_BRACKET

    INT             shift and go to state 4
    FLOAT           shift and go to state 10
    LEFT_PAR        shift and go to state 5
    ID              shift and go to state 9

    id_class                       shift and go to state 22
    expression                     shift and go to state 56

state 48

    (33) expression_ctrl -> IF LEFT_PAR expression_rl RIGHT_PAR . expression_bra
    (34) expression_ctrl -> IF LEFT_PAR expression_rl RIGHT_PAR . expression_bra ELSE expression_bra
    (30) expression_bra -> . LEFT_BRACES expression_c RIGHT_BRACES

    LEFT_BRACES     shift and go to state 54

    expression_bra                 shift and go to state 57

state 49

    (16) var_assign -> id_class EQUALS expression SEMICOLON .

    WHILE           reduce using rule 16 (var_assign -> id_class EQUALS expression SEMICOLON .)
    IF              reduce using rule 16 (var_assign -> id_class EQUALS expression SEMICOLON .)
    ID              reduce using rule 16 (var_assign -> id_class EQUALS expression SEMICOLON .)
    RIGHT_BRACES    reduce using rule 16 (var_assign -> id_class EQUALS expression SEMICOLON .)
    VAR             reduce using rule 16 (var_assign -> id_class EQUALS expression SEMICOLON .)
    INT             reduce using rule 16 (var_assign -> id_class EQUALS expression SEMICOLON .)
    FLOAT           reduce using rule 16 (var_assign -> id_class EQUALS expression SEMICOLON .)
    LEFT_PAR        reduce using rule 16 (var_assign -> id_class EQUALS expression SEMICOLON .)
    $end            reduce using rule 16 (var_assign -> id_class EQUALS expression SEMICOLON .)


state 50

    (14) id_class -> ID LEFT_BRACKET INT RIGHT_BRACKET .

    EQUALS          reduce using rule 14 (id_class -> ID LEFT_BRACKET INT RIGHT_BRACKET .)
    MULTIPLY        reduce using rule 14 (id_class -> ID LEFT_BRACKET INT RIGHT_BRACKET .)
    DIVIDE          reduce using rule 14 (id_class -> ID LEFT_BRACKET INT RIGHT_BRACKET .)
    PLUS            reduce using rule 14 (id_class -> ID LEFT_BRACKET INT RIGHT_BRACKET .)
    MINUS           reduce using rule 14 (id_class -> ID LEFT_BRACKET INT RIGHT_BRACKET .)
    POWER           reduce using rule 14 (id_class -> ID LEFT_BRACKET INT RIGHT_BRACKET .)
    VAR             reduce using rule 14 (id_class -> ID LEFT_BRACKET INT RIGHT_BRACKET .)
    INT             reduce using rule 14 (id_class -> ID LEFT_BRACKET INT RIGHT_BRACKET .)
    FLOAT           reduce using rule 14 (id_class -> ID LEFT_BRACKET INT RIGHT_BRACKET .)
    LEFT_PAR        reduce using rule 14 (id_class -> ID LEFT_BRACKET INT RIGHT_BRACKET .)
    WHILE           reduce using rule 14 (id_class -> ID LEFT_BRACKET INT RIGHT_BRACKET .)
    IF              reduce using rule 14 (id_class -> ID LEFT_BRACKET INT RIGHT_BRACKET .)
    ID              reduce using rule 14 (id_class -> ID LEFT_BRACKET INT RIGHT_BRACKET .)
    $end            reduce using rule 14 (id_class -> ID LEFT_BRACKET INT RIGHT_BRACKET .)
    RIGHT_PAR       reduce using rule 14 (id_class -> ID LEFT_BRACKET INT RIGHT_BRACKET .)
    RL_OP           reduce using rule 14 (id_class -> ID LEFT_BRACKET INT RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 14 (id_class -> ID LEFT_BRACKET INT RIGHT_BRACKET .)
    COMMA           reduce using rule 14 (id_class -> ID LEFT_BRACKET INT RIGHT_BRACKET .)


state 51

    (15) id_class -> ID LEFT_BRACKET ID RIGHT_BRACKET .

    EQUALS          reduce using rule 15 (id_class -> ID LEFT_BRACKET ID RIGHT_BRACKET .)
    MULTIPLY        reduce using rule 15 (id_class -> ID LEFT_BRACKET ID RIGHT_BRACKET .)
    DIVIDE          reduce using rule 15 (id_class -> ID LEFT_BRACKET ID RIGHT_BRACKET .)
    PLUS            reduce using rule 15 (id_class -> ID LEFT_BRACKET ID RIGHT_BRACKET .)
    MINUS           reduce using rule 15 (id_class -> ID LEFT_BRACKET ID RIGHT_BRACKET .)
    POWER           reduce using rule 15 (id_class -> ID LEFT_BRACKET ID RIGHT_BRACKET .)
    VAR             reduce using rule 15 (id_class -> ID LEFT_BRACKET ID RIGHT_BRACKET .)
    INT             reduce using rule 15 (id_class -> ID LEFT_BRACKET ID RIGHT_BRACKET .)
    FLOAT           reduce using rule 15 (id_class -> ID LEFT_BRACKET ID RIGHT_BRACKET .)
    LEFT_PAR        reduce using rule 15 (id_class -> ID LEFT_BRACKET ID RIGHT_BRACKET .)
    WHILE           reduce using rule 15 (id_class -> ID LEFT_BRACKET ID RIGHT_BRACKET .)
    IF              reduce using rule 15 (id_class -> ID LEFT_BRACKET ID RIGHT_BRACKET .)
    ID              reduce using rule 15 (id_class -> ID LEFT_BRACKET ID RIGHT_BRACKET .)
    $end            reduce using rule 15 (id_class -> ID LEFT_BRACKET ID RIGHT_BRACKET .)
    RIGHT_PAR       reduce using rule 15 (id_class -> ID LEFT_BRACKET ID RIGHT_BRACKET .)
    RL_OP           reduce using rule 15 (id_class -> ID LEFT_BRACKET ID RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 15 (id_class -> ID LEFT_BRACKET ID RIGHT_BRACKET .)
    COMMA           reduce using rule 15 (id_class -> ID LEFT_BRACKET ID RIGHT_BRACKET .)


state 52

    (10) var_type_id -> var_type_id COMMA id_class .

    COMMA           reduce using rule 10 (var_type_id -> var_type_id COMMA id_class .)
    SEMICOLON       reduce using rule 10 (var_type_id -> var_type_id COMMA id_class .)


state 53

    (8) var_declaration -> var_declaration SEMICOLON var_type . var_type_id
    (9) var_type_id -> . id_class
    (10) var_type_id -> . var_type_id COMMA id_class
    (13) id_class -> . ID
    (14) id_class -> . ID LEFT_BRACKET INT RIGHT_BRACKET
    (15) id_class -> . ID LEFT_BRACKET ID RIGHT_BRACKET

    ID              shift and go to state 9

    var_type_id                    shift and go to state 58
    id_class                       shift and go to state 30

state 54

    (30) expression_bra -> LEFT_BRACES . expression_c RIGHT_BRACES
    (28) expression_c -> . expression_co
    (29) expression_c -> . expression_co expression_c
    (26) expression_co -> . var_assign
    (27) expression_co -> . expression_ctrl
    (16) var_assign -> . id_class EQUALS expression SEMICOLON
    (32) expression_ctrl -> . WHILE LEFT_PAR expression_rl RIGHT_PAR expression_bra
    (33) expression_ctrl -> . IF LEFT_PAR expression_rl RIGHT_PAR expression_bra
    (34) expression_ctrl -> . IF LEFT_PAR expression_rl RIGHT_PAR expression_bra ELSE expression_bra
    (13) id_class -> . ID
    (14) id_class -> . ID LEFT_BRACKET INT RIGHT_BRACKET
    (15) id_class -> . ID LEFT_BRACKET ID RIGHT_BRACKET

    WHILE           shift and go to state 6
    IF              shift and go to state 7
    ID              shift and go to state 9

    expression_c                   shift and go to state 59
    expression_ctrl                shift and go to state 60
    id_class                       shift and go to state 63
    var_assign                     shift and go to state 62
    expression_co                  shift and go to state 61

state 55

    (32) expression_ctrl -> WHILE LEFT_PAR expression_rl RIGHT_PAR expression_bra .

    WHILE           reduce using rule 32 (expression_ctrl -> WHILE LEFT_PAR expression_rl RIGHT_PAR expression_bra .)
    IF              reduce using rule 32 (expression_ctrl -> WHILE LEFT_PAR expression_rl RIGHT_PAR expression_bra .)
    ID              reduce using rule 32 (expression_ctrl -> WHILE LEFT_PAR expression_rl RIGHT_PAR expression_bra .)
    RIGHT_BRACES    reduce using rule 32 (expression_ctrl -> WHILE LEFT_PAR expression_rl RIGHT_PAR expression_bra .)
    VAR             reduce using rule 32 (expression_ctrl -> WHILE LEFT_PAR expression_rl RIGHT_PAR expression_bra .)
    INT             reduce using rule 32 (expression_ctrl -> WHILE LEFT_PAR expression_rl RIGHT_PAR expression_bra .)
    FLOAT           reduce using rule 32 (expression_ctrl -> WHILE LEFT_PAR expression_rl RIGHT_PAR expression_bra .)
    LEFT_PAR        reduce using rule 32 (expression_ctrl -> WHILE LEFT_PAR expression_rl RIGHT_PAR expression_bra .)
    $end            reduce using rule 32 (expression_ctrl -> WHILE LEFT_PAR expression_rl RIGHT_PAR expression_bra .)


state 56

    (31) expression_rl -> expression RL_OP expression .
    (18) expression -> expression . MULTIPLY expression
    (19) expression -> expression . DIVIDE expression
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . POWER expression

    RIGHT_PAR       reduce using rule 31 (expression_rl -> expression RL_OP expression .)
    MULTIPLY        shift and go to state 17
    DIVIDE          shift and go to state 20
    PLUS            shift and go to state 21
    MINUS           shift and go to state 18
    POWER           shift and go to state 19


state 57

    (33) expression_ctrl -> IF LEFT_PAR expression_rl RIGHT_PAR expression_bra .
    (34) expression_ctrl -> IF LEFT_PAR expression_rl RIGHT_PAR expression_bra . ELSE expression_bra

    WHILE           reduce using rule 33 (expression_ctrl -> IF LEFT_PAR expression_rl RIGHT_PAR expression_bra .)
    IF              reduce using rule 33 (expression_ctrl -> IF LEFT_PAR expression_rl RIGHT_PAR expression_bra .)
    ID              reduce using rule 33 (expression_ctrl -> IF LEFT_PAR expression_rl RIGHT_PAR expression_bra .)
    RIGHT_BRACES    reduce using rule 33 (expression_ctrl -> IF LEFT_PAR expression_rl RIGHT_PAR expression_bra .)
    VAR             reduce using rule 33 (expression_ctrl -> IF LEFT_PAR expression_rl RIGHT_PAR expression_bra .)
    INT             reduce using rule 33 (expression_ctrl -> IF LEFT_PAR expression_rl RIGHT_PAR expression_bra .)
    FLOAT           reduce using rule 33 (expression_ctrl -> IF LEFT_PAR expression_rl RIGHT_PAR expression_bra .)
    LEFT_PAR        reduce using rule 33 (expression_ctrl -> IF LEFT_PAR expression_rl RIGHT_PAR expression_bra .)
    $end            reduce using rule 33 (expression_ctrl -> IF LEFT_PAR expression_rl RIGHT_PAR expression_bra .)
    ELSE            shift and go to state 64


state 58

    (8) var_declaration -> var_declaration SEMICOLON var_type var_type_id .
    (10) var_type_id -> var_type_id . COMMA id_class

    SEMICOLON       reduce using rule 8 (var_declaration -> var_declaration SEMICOLON var_type var_type_id .)
    COMMA           shift and go to state 44


state 59

    (30) expression_bra -> LEFT_BRACES expression_c . RIGHT_BRACES

    RIGHT_BRACES    shift and go to state 65


state 60

    (27) expression_co -> expression_ctrl .

    WHILE           reduce using rule 27 (expression_co -> expression_ctrl .)
    IF              reduce using rule 27 (expression_co -> expression_ctrl .)
    ID              reduce using rule 27 (expression_co -> expression_ctrl .)
    RIGHT_BRACES    reduce using rule 27 (expression_co -> expression_ctrl .)


state 61

    (28) expression_c -> expression_co .
    (29) expression_c -> expression_co . expression_c
    (28) expression_c -> . expression_co
    (29) expression_c -> . expression_co expression_c
    (26) expression_co -> . var_assign
    (27) expression_co -> . expression_ctrl
    (16) var_assign -> . id_class EQUALS expression SEMICOLON
    (32) expression_ctrl -> . WHILE LEFT_PAR expression_rl RIGHT_PAR expression_bra
    (33) expression_ctrl -> . IF LEFT_PAR expression_rl RIGHT_PAR expression_bra
    (34) expression_ctrl -> . IF LEFT_PAR expression_rl RIGHT_PAR expression_bra ELSE expression_bra
    (13) id_class -> . ID
    (14) id_class -> . ID LEFT_BRACKET INT RIGHT_BRACKET
    (15) id_class -> . ID LEFT_BRACKET ID RIGHT_BRACKET

    RIGHT_BRACES    reduce using rule 28 (expression_c -> expression_co .)
    WHILE           shift and go to state 6
    IF              shift and go to state 7
    ID              shift and go to state 9

    expression_c                   shift and go to state 66
    expression_ctrl                shift and go to state 60
    id_class                       shift and go to state 63
    var_assign                     shift and go to state 62
    expression_co                  shift and go to state 61

state 62

    (26) expression_co -> var_assign .

    WHILE           reduce using rule 26 (expression_co -> var_assign .)
    IF              reduce using rule 26 (expression_co -> var_assign .)
    ID              reduce using rule 26 (expression_co -> var_assign .)
    RIGHT_BRACES    reduce using rule 26 (expression_co -> var_assign .)


state 63

    (16) var_assign -> id_class . EQUALS expression SEMICOLON

    EQUALS          shift and go to state 26


state 64

    (34) expression_ctrl -> IF LEFT_PAR expression_rl RIGHT_PAR expression_bra ELSE . expression_bra
    (30) expression_bra -> . LEFT_BRACES expression_c RIGHT_BRACES

    LEFT_BRACES     shift and go to state 54

    expression_bra                 shift and go to state 67

state 65

    (30) expression_bra -> LEFT_BRACES expression_c RIGHT_BRACES .

    ELSE            reduce using rule 30 (expression_bra -> LEFT_BRACES expression_c RIGHT_BRACES .)
    VAR             reduce using rule 30 (expression_bra -> LEFT_BRACES expression_c RIGHT_BRACES .)
    INT             reduce using rule 30 (expression_bra -> LEFT_BRACES expression_c RIGHT_BRACES .)
    FLOAT           reduce using rule 30 (expression_bra -> LEFT_BRACES expression_c RIGHT_BRACES .)
    LEFT_PAR        reduce using rule 30 (expression_bra -> LEFT_BRACES expression_c RIGHT_BRACES .)
    WHILE           reduce using rule 30 (expression_bra -> LEFT_BRACES expression_c RIGHT_BRACES .)
    IF              reduce using rule 30 (expression_bra -> LEFT_BRACES expression_c RIGHT_BRACES .)
    ID              reduce using rule 30 (expression_bra -> LEFT_BRACES expression_c RIGHT_BRACES .)
    $end            reduce using rule 30 (expression_bra -> LEFT_BRACES expression_c RIGHT_BRACES .)
    RIGHT_BRACES    reduce using rule 30 (expression_bra -> LEFT_BRACES expression_c RIGHT_BRACES .)


state 66

    (29) expression_c -> expression_co expression_c .

    RIGHT_BRACES    reduce using rule 29 (expression_c -> expression_co expression_c .)


state 67

    (34) expression_ctrl -> IF LEFT_PAR expression_rl RIGHT_PAR expression_bra ELSE expression_bra .

    WHILE           reduce using rule 34 (expression_ctrl -> IF LEFT_PAR expression_rl RIGHT_PAR expression_bra ELSE expression_bra .)
    IF              reduce using rule 34 (expression_ctrl -> IF LEFT_PAR expression_rl RIGHT_PAR expression_bra ELSE expression_bra .)
    ID              reduce using rule 34 (expression_ctrl -> IF LEFT_PAR expression_rl RIGHT_PAR expression_bra ELSE expression_bra .)
    RIGHT_BRACES    reduce using rule 34 (expression_ctrl -> IF LEFT_PAR expression_rl RIGHT_PAR expression_bra ELSE expression_bra .)
    VAR             reduce using rule 34 (expression_ctrl -> IF LEFT_PAR expression_rl RIGHT_PAR expression_bra ELSE expression_bra .)
    INT             reduce using rule 34 (expression_ctrl -> IF LEFT_PAR expression_rl RIGHT_PAR expression_bra ELSE expression_bra .)
    FLOAT           reduce using rule 34 (expression_ctrl -> IF LEFT_PAR expression_rl RIGHT_PAR expression_bra ELSE expression_bra .)
    LEFT_PAR        reduce using rule 34 (expression_ctrl -> IF LEFT_PAR expression_rl RIGHT_PAR expression_bra ELSE expression_bra .)
    $end            reduce using rule 34 (expression_ctrl -> IF LEFT_PAR expression_rl RIGHT_PAR expression_bra ELSE expression_bra .)

